{"version":3,"sources":["UI/NavBar/NavBar.js","service/axios.js","service/Requests.js","UI/Banner/Banner.js","UI/Row/Row.js","UI/HomeScreen/HomeScreen.js","App.js","features/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["NavBar","useState","show","setShow","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","string","n","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","orginal_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","App","counterSlice","createSlice","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7947dc36.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport './NavBar.css';\n\nconst NavBar = () => {\n    // NAVBAR TRANSITION ANIMATION\n    const [show, setShow] = useState(false);\n\n    const transitionNavBar = () => {\n        if(window.scrollY > 100) {\n            setShow(true);\n        } else {\n            setShow(false);\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener('scroll', transitionNavBar);\n        return () => window.removeEventListener('scroll', transitionNavBar);\n    }, [])\n\n    return (\n        <div className={`navbar ${show && 'navbar__black'}`}>\n            <div className=\"navbar__content\">\n                <img \n                    className=\"navbar__logo\"\n                    src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" \n                    alt=\"\"\n                />\n\n                <img \n                    className=\"navbar__avatar\"\n                    src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/84c20033850498.56ba69ac290ea.png\" alt=\"\"\n                />\n            </div>    \n        </div>\n    )\n}\n\nexport default NavBar;\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n})\n\nexport default instance;","\nconst API_KEY= \"f1cc4243a15885464fb606f7fea16639\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default requests;","import React, { useState, useEffect } from 'react';\nimport axios from '../../service/axios';\nimport requests from '../../service/Requests';\n\nimport './Banner.css'\n\nconst Banner = () => {\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n                const request = await axios.get(requests.fetchNetflixOriginals);\n                setMovie(request.data.results[\n                    Math.floor(Math.random() * request.data.results.length - 1)\n                ]\n            );\n            return request;\n        }\n\n        fetchData();\n    }, []);\n\n    // MAX 150 STRING FUNCTION\n    const truncate = (string, n) => {\n        return string?.length > n ? string.substr(0, n - 1) + '...' : string;\n    }\n\n    return (\n        <header \n            className=\"banner\" \n            style={{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n                backgroundPosition: \"center, center\",\n            }}\n        >\n            <div className=\"banner__content\">\n                <h1 className=\"banner__title\">\n                    { movie?.title || movie?.name || movie?.orginal_name  }\n                </h1>\n                <div className=\"banner__buttons\">\n                    <button className=\"banner__button\">Play</button>\n                    <button className=\"banner__button\">My List</button>\n                </div>\n                <h1 className=\"banner__description\">\n                    { truncate(movie?.overview, 150) }\n                </h1>\n            </div>\n\n            <div className=\"banner--fadeBottom\" />\n        </header>\n    )\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from 'react';\nimport axios from '../../service/axios';\n\nimport './Row.css';\n\nconst Row = ({ title, fetchUrl, isLargeRow = false }) => {\n\n    // FETCH POSTS\n    const[movies, setMovies] = useState([]);\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        \n        fetchData();\n    }, [fetchUrl]) \n\n    return (\n        <div className=\"row\">\n            <h2 className=\"\">{ title }</h2>\n\n            <div className=\"row__posters\">\n                { movies.map((movie) => (\n                    ((isLargeRow && movie.poster_path) || \n                    (!isLargeRow && movie.backdrop_path)) && \n                        (\n                            <img \n                                className={ `row__poster ${isLargeRow && \"row__posterLarge\" }` }\n                                key={movie.id}\n                                src={ `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}` }\n                                alt={ movie.name }\n                            />\n                        ) \n                    )\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default Row;\n","import React from 'react';\nimport NavBar from '../NavBar/NavBar';\nimport Banner from '../Banner/Banner';\nimport Row from '../Row/Row';\nimport requests from '../../service/Requests';\n\nimport './HomeScreen.css'\n\n\nconst HomeScreen = () => {\n\n    return (\n        <div className=\"homeScreen\">\n            <NavBar />\n          \n            <Banner />\n            \n            <Row title='NETFLIX ORIGINALS' fetchUrl={requests.fetchNetflixOriginals} isLargeRow />\n            <Row title='Trending Now' fetchUrl={requests.fetchTrending} />\n            <Row title='Top Rated' fetchUrl={requests.fetchTopRated} />\n            <Row title='Action Movies' fetchUrl={requests.fetchActionMovies} />\n            <Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies} />\n            <Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies} />\n            <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies} />\n            <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries} />\n        </div>\n    );\n}\n\nexport default HomeScreen;\n","import React from 'react';\r\nimport HomeScreen from './UI/HomeScreen/HomeScreen';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <HomeScreen />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}